var logic = (function () {    function init() {        event();    }    function event(){        $('.btn-add').on('click',function (e) {            e.stopPropagation();            // var newDom=$(this).parent().find('.select-item-');            var html='<div class="select-item- clearfix" style="margin-top: 10px;">\n' +                ' <select class="form-control selectpicker pull-left">\n' +                ' <option value="1" selected="">中国</option>\n' +                ' <option value="2">美国</option>\n' +                ' <option value="3">其他</option>\n' +                ' </select>\n' +                ' <div class="help-block pull-left del-btn"><i class="fa fa-minus-square-o"></i></div>\n' +                ' </div>'            // newDom.insertBefore('.btn-add');            $(".btn-add").before(html);            if($('.select-item-')){                $(this).css({marginTop:'20px'});            }            $(".selectpicker").selectpicker("refresh");        });        $(document).on('click','.select-items .del-btn',function (e) {            e.stopPropagation();            $(this).parent().remove();            // console.log($('.select-item-'))            if(!$('.select-item-').length){                $(".btn-add").css({marginTop:0});            }        });        $('.hot-tag li').on('click',function(){            if($(this).hasClass('active')){                $(this).removeClass('active')            }else {                $(this).addClass('active')            }        })        // 整租合租切换        $(".radioBox input").on('change',function(e){            console.log(e)            var defaultValue=e.target.defaultValue;            if(defaultValue==1){                $('.whole-rent').show();                $('.roommates').hide();            }else if(defaultValue==2){                $('.whole-rent').hide();                $('.roommates').show();            }        })    }    return {        init: init    }}());var map = function () {    var map,        position = {};    function mapInit(id) {        map = new BMap.Map(id);        // 通过ip定位城市        function myFun(result) {            // console.log(result)            var point, marker;            point = new BMap.Point(result.center.lng, result.center.lat);            map.centerAndZoom(point, 12);            marker = new BMap.Marker(point);  // 创建标注            map.addOverlay(marker);               // 将标注添加到地图中            marker.setAnimation(BMAP_ANIMATION_BOUNCE); //跳动的动画            map.enableScrollWheelZoom(true);            map.enableInertialDragging();            map.enableContinuousZoom();            // 城市切换            map.addControl(new BMap.CityListControl({                anchor: BMAP_ANCHOR_TOP_LEFT,                offset: new BMap.Size(10, 20),                onChangeSuccess: function (e) {                    // console.log(e)                    var marker, point;                    position.lan = e.point.lng;                    position.lat = e.point.lat;                    point = new BMap.Point(e.point.lng, e.point.lat);                    marker = new BMap.Marker(point);                    map.addOverlay(marker);                    marker.setAnimation(BMAP_ANIMATION_BOUNCE);                }            }));            //单击获取点击的经纬度            map.addEventListener("click", function (e) {                map.clearOverlays();                marker = new BMap.Marker(e.point);                map.addOverlay(marker);               // 将标注添加到地图中                marker.setAnimation(BMAP_ANIMATION_BOUNCE); //跳动的动画                position.lan = e.point.lng;                position.lat = e.point.lat;            });        }        new BMap.LocalCity().get(myFun);    }    // 用经纬度设置地图中心点    function theLocation(id, lan, lon) {        if (lan != "" && lon != "") {            map = new BMap.Map(id);            var new_point = new BMap.Point(lan, lon);            map.centerAndZoom(new_point, 18);            var marker = new BMap.Marker(new_point);  // 创建标注            map.addOverlay(marker);              // 将标注添加到地图中            marker.setAnimation(BMAP_ANIMATION_BOUNCE); //跳动的动画            map.panTo(new_point);            map.enableScrollWheelZoom(true);            map.enableInertialDragging();            map.enableContinuousZoom();            // 城市切换            map.addControl(new BMap.CityListControl({                anchor: BMAP_ANCHOR_TOP_LEFT,                offset: new BMap.Size(10, 20),                onChangeSuccess: function (e) {                    // console.log(e)                    var marker, point;                    position.lan = e.point.lng;                    position.lat = e.point.lat;                    point = new BMap.Point(e.point.lng, e.point.lat);                    marker = new BMap.Marker(point);                    map.addOverlay(marker);                    marker.setAnimation(BMAP_ANIMATION_BOUNCE);                }            }));            //单击获取点击的经纬度            map.addEventListener("click", function (e) {                map.clearOverlays();                marker = new BMap.Marker(e.point);                map.addOverlay(marker);               // 将标注添加到地图中                marker.setAnimation(BMAP_ANIMATION_BOUNCE); //跳动的动画                position.lan = e.point.lng;                position.lat = e.point.lat;            });        }    }    function setPlace(str) {        var pos = {};        map.clearOverlays();    //清除地图上所有覆盖物        function myFun() {            var pp = local.getResults().getPoi(0).point;    //获取第一个智能搜索的结果            map.centerAndZoom(pp, 18);            marker = new BMap.Marker(pp);            map.addOverlay(marker);               // 将标注添加到地图中            marker.setAnimation(BMAP_ANIMATION_BOUNCE); //跳动的动画            pos.lan = pp.lng;            pos.lat = pp.lat;            position.lan = pp.lng;            position.lat = pp.lat;        }        var local = new BMap.LocalSearch(map, { //智能搜索            onSearchComplete: myFun        });        local.search(str);        return pos;    }    function getPos() {        return position;    }    return {        mapInit: mapInit,        theLocation: theLocation,        getPos: getPos,        setPlace: setPlace    }}();// 上传图片并预览var fileUpload = function () {    var fileData = {};    var filesNum=12;    function init() {        getPath();        // fileVadio();        event();    };    function getPath() {        // 上传文件input的id        var el = document.getElementById('file');        el.onchange = function () {            // 高版本浏览器            //tab页类名或id确保唯一性            if(filesNum>12) return;            var index = $('.tab-list').find('li.active').index(),                name = $('.tab-list').find('li.active').text();            if (window.FileReader) {                var files = this.files;                if (picTypeValidation(el)) {                    for (var i = 0; i < files.length; i++) {                        // console.log(files[i])                        //获取照片方向角属性，用户旋转控制                        var Orientation = null;                        EXIF.getData(files[i], function () {                            // alert(EXIF.pretty(this));                            EXIF.getAllTags(this);                            //alert(EXIF.getTag(this, 'Orientation'));                            Orientation = EXIF.getTag(this, 'Orientation');                            // console.log(Orientation)                            //return;                        });                        var reader = new FileReader();                        reader.readAsDataURL(files[i]);                        reader.onload = function () {                            var image = new Image();                            // console.log(this.result)                            image.src = this.result;                            image.onload = function() {                                var expectWidth = this.naturalWidth;                                var expectHeight = this.naturalHeight;                                if (this.naturalWidth > this.naturalHeight && this.naturalWidth > 800) {                                    expectWidth = 800;                                    expectHeight = expectWidth * this.naturalHeight / this.naturalWidth;                                } else if (this.naturalHeight > this.naturalWidth && this.naturalHeight > 1200) {                                    expectHeight = 1200;                                    expectWidth = expectHeight * this.naturalWidth / this.naturalHeight;                                }                                var canvas = document.createElement("canvas");                                var ctx = canvas.getContext("2d");                                canvas.width = expectWidth;                                canvas.height = expectHeight;                                ctx.drawImage(this, 0, 0, expectWidth, expectHeight);                                var base64 = null;                                //修复ios                                if (navigator.userAgent.match(/iphone/i)) {                                    console.log('iphone');                                    //alert(expectWidth + ',' + expectHeight);                                    //如果方向角不为1，都需要进行旋转 added by lzk                                    if (Orientation != "" && Orientation != 1) {                                        alert('旋转处理');                                        switch (Orientation) {                                            case 6: //需要顺时针（向左）90度旋转                                                // alert('需要顺时针（向左）90度旋转');                                                rotateImg(this, 'left', canvas);                                                break;                                            case 8: //需要逆时针（向右）90度旋转                                                // alert('需要顺时针（向右）90度旋转');                                                rotateImg(this, 'right', canvas);                                                break;                                            case 3: //需要180度旋转                                                // alert('需要180度旋转');                                                rotateImg(this, 'right', canvas,3); //转两次                                                break;                                        }                                    }                                    /*var mpImg = new MegaPixImage(image);                                    mpImg.render(canvas, {                                        maxWidth: 800,                                        maxHeight: 1200,                                        quality: 0.8,                                        orientation: 8                                    });*/                                    base64 = canvas.toDataURL("image/jpeg", 0.8);                                } else if (navigator.userAgent.match(/Android/i)) {                                    // 修复android                                    console.log('修复android')                                    var encoder = new JPEGEncoder();                                    base64 = encoder.encode(ctx.getImageData(0, 0, expectWidth, expectHeight), 80);                                } else {                                    //alert(Orientation);                                    if (Orientation != 1) {                                        // console.log('other')                                        //alert('旋转处理');                                        switch (Orientation) {                                            case 6: //需要顺时针（向左）90度旋转                                                // alert('需要顺时针（向左）90度旋转');                                                rotateImg(this, 'left', canvas);                                                break;                                            case 8: //需要逆时针（向右）90度旋转                                                // alert('需要顺时针（向右）90度旋转');                                                rotateImg(this, 'right', canvas);                                                break;                                            case 3: //需要180度旋转                                                // alert('需要180度旋转');                                                rotateImg(this, 'left', canvas,3);                                                break;                                        }                                        base64 = canvas.toDataURL("image/jpeg", 0.8);                                    }else{                                        base64 = canvas.toDataURL("image/jpeg", 0.8);                                    }                                }                                //uploadImage(base64);                                $("#myImage").attr("src", base64);                                if (fileData['pic_' + index]) {                                    if (fileData['pic_' + index].data.indexOf(base64) == -1) {                                        fileData['pic_' + index].data = fileData['pic_' + index].data.concat([base64]);                                        renderPic(fileData);                                    } else {                                        alert('请勿重复上传图片！');                                    }                                } else {                                    fileData['pic_' + index] = {                                        name: name,                                        data: [base64]                                    };                                    renderPic(fileData);                                }                            };                    };                }                el.value = '';            };        }    else        {            alert('你的浏览器不支持上传多张图片，请更换高版本浏览器！')        }    }}    function picTypeValidation(el) {    var files = el.files;    var reg = /.(jpg|jpeg|png|gif|JPG|JPEG|PNG|GIF)$/;    var max = 10;    var SIZE = 1024 * 1024 * max;    for (var i = 0; i < files.length; i++) {        var name = files[i].name;        var size = files[i].size;        // console.log(name)        if (!reg.test(name.toUpperCase())) {            alert("图片类型必须是.gif,jpeg,jpg,png中的一种," + name + '不符合！');            return false;        }        // console.log(size/1024/1024);        if (size > SIZE) {            alert("单张图片不能大于" + max + 'M' + name + '大小为' + (size / 1024 / 1024).toFixed(2) + 'M');            return false;        }    }    return true;}    //对图片旋转处理 added by lzk    function rotateImg(img, direction, canvas,step) {    //alert(img);    //最小与最大旋转方向，图片旋转4次后回到原方向    var step=step?step:2;    var min_step = 0;    var max_step = 3;    //var img = document.getElementById(pid);    if (img == null) return;    //img的高度和宽度不能在img元素隐藏后获取，否则会出错    var height = img.height;    var width = img.width;    //var step = img.getAttribute('step');    if (step == null) {        step = min_step;    }    if (direction == 'right') {        step++;        //旋转到原位置，即超过最大值        step > max_step && (step = min_step);    } else {        step--;        step < min_step && (step = max_step);    }    //img.setAttribute('step', step);    /*var canvas = document.getElementById('pic_' + pid);    if (canvas == null) {        img.style.display = 'none';        canvas = document.createElement('canvas');        canvas.setAttribute('id', 'pic_' + pid);        img.parentNode.appendChild(canvas);    }  */    //旋转角度以弧度值为参数    var degree = step * 90 * Math.PI / 180;    var ctx = canvas.getContext('2d');    switch (step) {        case 0:            canvas.width = width;            canvas.height = height;            ctx.drawImage(img, 0, 0);            break;        case 1:            canvas.width = height;            canvas.height = width;            ctx.rotate(degree);            ctx.drawImage(img, 0, -height);            break;        case 2:            canvas.width = width;            canvas.height = height;            ctx.rotate(degree);            ctx.drawImage(img, -width, -height);            break;        case 3:            canvas.width = height;            canvas.height = width;            ctx.rotate(degree);            ctx.drawImage(img, -width, 0);            break;    }}    // 渲染照片列表    function renderPic(fileData) {    var index = $('.tab-list').find('li.active').index();    var srcList = fileData['pic_' + index] ? fileData['pic_' + index].data : [];    var liList = '';    for (var i = 0; i < srcList.length; i++) {        liList += '<li>'        liList += '<div class="img-con" style="background-image: url(' + srcList[i] + ')">';        // liList+='<img src='+srcList[i]+' alt="">';        liList += '<div class="mask">点击查看</div>';        liList += '</div>';        liList += '<div class="del">删除</div>';        liList += '</li>';    }    $('.pic-con .pic-list' + index).html(liList);    var arr=[];    Object.keys(fileData).forEach(function(item){        arr=arr.concat(fileData[item].data);    });    $(".flie-num").text(arr.length+'/12');    event();}    function event() {    $('.pic-title li').on('click', function () {        $(this).addClass('active').siblings().removeClass('active');        var index = $(this).index();        $(".pic-con").find('.pic-list').eq(index).show().siblings().hide();    });    $('.pic-con .del').on('click',function(){        var li_index=$(this).parents('li').index();        var mark=$(this).parents('ul').attr('class').split(' ')[1].slice(-1);        fileData['pic_'+mark].data.splice(li_index,1);        renderPic(fileData);    });    $('.pic-list .mask').on('click',function(){        var src=$(this).parent().css('backgroundImage').replace('url(','').replace(')','');        var html='';            html+='<div class="preview" style="width: 100%;height: 100%;position: fixed;left:0;right:0;bottom:0;top:0;background-color: rgba(0,0,0,.3)">';            html+='<img style="display:block; max-width: 800px; max-height: 600px; position: absolute; top:50%;left:50%; transform:translate(-50%,-50%);" src='+src+'/>';            html+='</div>';            if(!$('.preview')){                $('body').append(html);            }else{                $('.preview').remove();                $('body').append(html);            }            $('.preview').on('click',function(){                $(this).remove();            })    });}    function fileVadio(){        var el=document.getElementById('fileVadio');        el.onchange=function(){            var reader=new FileReader();            reader.readAsDataURL(this.files[0]);            reader.onload=function(e){                console.log(e)                console.log(this.result)            }        }    }    function getFilesObj(){        return fileData;    }return {    init: init,    getFilesObj:getFilesObj}}();